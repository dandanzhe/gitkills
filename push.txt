#第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"	#如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
#第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面,然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
#首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库,然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
$ git remote add origin git@github.com:dandanzhe/XXXX	#请千万注意，把上面的dandanzhe替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
#下一步，就可以把本地库的所有内容推送到远程库上：
$ git push -u origin master		#把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
#从现在起，只要本地作了提交，就可以通过命令：
$ git push origin master		#把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！

#要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

#关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

#此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

#分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！